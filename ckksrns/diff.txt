diff --git a/ckksntt/ckkselem.cpp b/ckksntt/ckkselem.cpp
index 68619f2..d849e67 100644
--- a/ckksntt/ckkselem.cpp
+++ b/ckksntt/ckkselem.cpp
@@ -85,7 +85,7 @@ std::vector<cx> ckks::decode(const Param & p, const Poly & m)
     return r;
 }
 
-ckks::Ctxt ckks::encrypt(Sk sk, Poly m, Param p, RndStream rs)
+ckks::Ctxt ckks::encrypt(Sk sk, Poly m, Param p, RndStream & rs)
 {
     auto q = p.qL();
 
@@ -108,7 +108,7 @@ ckks::Ctxt ckks::encrypt(Sk sk, Poly m, Param p, RndStream rs)
     return r;
 }
 
-ckks::Ctxt ckks::encrypt(Pk pk, Poly m, Param p, RndStream rs)
+ckks::Ctxt ckks::encrypt(Pk pk, Poly m, Param p, RndStream & rs)
 {
     // c0 = PK0*u+e1+M
     // c1 = PK1*u+e2
@@ -233,31 +233,33 @@ ckks::Ctxt ckks::relinExt(const Ctxt3 & c, const Param & par, const EkExt & ek)
     Integer q = par.q(c.level);
     Integer pq = ek.P * q;
 
-    auto d2 = scaleUp(c.c2, q, ek.P, pq);
+    //auto d2 = scaleUp(c.c2, q, ek.P, pq);
+    auto d2 = rangeUp(c.c2, q);
+
     auto d2eka = mul(d2, ek.a, pq);
     auto d2ekb = mul(d2, ek.b, pq);
     auto pa = div(d2eka, ek.P, pq);
     auto pb = div(d2ekb, ek.P, pq);
     r.c0 = add(r.c0, pb, q);
-    r.c1 = add(r.c1, pb, q); // FIXME pb???
+    r.c1 = add(r.c1, pa, q);
     return r;
 }
 
-poly::Poly ckks::genPolyRq(int n, RndStream rs, Integer q)
+poly::Poly ckks::genPolyRq(int n, RndStream & rs, Integer q)
 {
     Poly r;
     for (int i = 0; i < n; i++) r += rs.getRq(q);
     return r;
 }
 
-poly::Poly ckks::genPolyEr(int n, RndStream rs)
+poly::Poly ckks::genPolyEr(int n, RndStream & rs)
 {
     Poly r;
     for (int i = 0; i < n; i++) r += rs.getEr();
     return r;
 }
 
-poly::Poly ckks::genPolyR2(int n, RndStream rs)
+poly::Poly ckks::genPolyR2(int n, RndStream & rs)
 {
     Poly r;
     for (int i = 0; i < n; i++) r += Integer(rs.getR2());
@@ -304,16 +306,18 @@ ckks::Sk::Sk(RndStream & rs, int sz)
 
 Integer ckks::RndStream::getRq(Integer q)
 {
-    if (0) return Integer(0);
+    if (0) return Integer(100);
     Integer & a = rq;
-    return ((++a) % q);
-    if (a <= q) a = 0;
-    return a;
+    Integer b = ++a;
+    b += (b + q / 100) * (q / 100);
+    return (b % q);
+    ///if (a <= q) a = 0;
+    ///return a;
 }
 
 int ckks::RndStream::getR2()
 {
-    if (0) return 0;
+    if (0) return 1;
     int & a = r2;
     return ((++a) % 3 - 1);
 }
@@ -325,7 +329,7 @@ Integer ckks::RndStream::getEr()
     return Integer((++a) % 5 - 2);
 }
 
-ckks::Pk::Pk(Sk sk, Param p, RndStream rs) : n(sk.n)
+ckks::Pk::Pk(Sk sk, Param p, RndStream & rs) : n(sk.n)
 {
     Poly m0(sk.n, Integer(0));
     Ctxt c = encrypt(sk, m0, p, rs);
@@ -335,10 +339,12 @@ ckks::Pk::Pk(Sk sk, Param p, RndStream rs) : n(sk.n)
 
 void ckks::ParamQx::forceNttValues()
 {
+    if (ntt::disabled) return;
+
     for ( auto & x : vql) x = ntt::findCloseQ(penc.n, x);
 }
 
-ckks::EkExt::EkExt(Sk sk, Param p, RndStream rs)
+ckks::EkExt::EkExt(Sk sk, Param p, RndStream & rs)
 {
     auto Q = p.qL();
     P = Q; // about right - change if need
diff --git a/ckksntt/ckkselem.h b/ckksntt/ckkselem.h
index 57e2dc5..8926793 100644
--- a/ckksntt/ckkselem.h
+++ b/ckksntt/ckkselem.h
@@ -71,6 +71,10 @@ class RndStream
         int getR2();
         Integer getRq(Integer q);
         Integer getEr();
+
+        RndStream() {};
+        RndStream(const RndStream &) = delete;
+        RndStream & operator=(const RndStream &) = default;
 };
 
 struct Sk
@@ -94,20 +98,19 @@ struct Ctxt3 : Ctxt
     Ctxt3(const Ctxt & c01, const Poly & c2) : Ctxt(c01), c2(c2) {}
 };
 
-// FIXME RnsStream must be ref&
-poly::Poly genPolyRq(int n, RndStream rs, Integer q);
-poly::Poly genPolyEr(int n, RndStream rs);
-poly::Poly genPolyR2(int n, RndStream rs);
+poly::Poly genPolyRq(int n, RndStream & rs, Integer q);
+poly::Poly genPolyEr(int n, RndStream & rs);
+poly::Poly genPolyR2(int n, RndStream & rs);
 
 struct Pk
 {
     int n;
     poly::Poly p0, p1;
-    Pk(Sk sk, Param p, RndStream rs);
+    Pk(Sk sk, Param p, RndStream & rs);
 };
 
-Ctxt encrypt(Pk pk, poly::Poly m, Param p, RndStream rs);
-Ctxt encrypt(Sk sk, poly::Poly m, Param p, RndStream rs);
+Ctxt encrypt(Pk pk, poly::Poly m, Param p, RndStream & rs);
+Ctxt encrypt(Sk sk, poly::Poly m, Param p, RndStream & rs);
 poly::Poly decrypt(Sk sk, Ctxt c, Param p);
 poly::Poly decrypt(Sk sk, Ctxt3 c, Param p);
 
@@ -120,7 +123,7 @@ struct EkExt
 {
     Integer P;
     poly::Poly b, a;
-    EkExt(Sk sk, Param p, RndStream rs);
+    EkExt(Sk sk, Param p, RndStream & rs);
 };
 
 Ctxt mulExt(const Ctxt & a, const Ctxt & b, const Param & p, const EkExt & ek);
diff --git a/ckksntt/ckkshyb.cpp b/ckksntt/ckkshyb.cpp
index 5cb13b7..cdbfde6 100644
--- a/ckksntt/ckkshyb.cpp
+++ b/ckksntt/ckkshyb.cpp
@@ -10,7 +10,7 @@ using std::cout;
 
 using poly::Poly;
 
-ckks::EkHyb::EkHyb(int lev, Sk sk, Param p, RndStream rs) : level(lev)
+ckks::EkHyb::EkHyb(int lev, Sk sk, Param p, RndStream & rs) : level(lev)
 {
     if (p.w == 0) nevers("Digit size is not set; assign size to 'w'");
     Poly s = sk.s;
@@ -134,14 +134,16 @@ ckks::Ctxt ckks::relinHyb(const Ctxt3 & c, const Param & par, const EkHyb & ek)
     auto P = ek.P;
     Integer pq = P * q;
 
-    auto d2 = scaleUp(c.c2, q, P, pq);
+    //auto d2 = scaleUp(c.c2, q, P, pq);
+    auto d2 = rangeUp(c.c2, q);
+
     poly::Dpoly wd2 = poly::WD(d2, w, pq);
     auto d2eka = poly::dot(wd2, ek.da, pq);
     auto d2ekb = poly::dot(wd2, ek.db, pq);
     auto pa = div(d2eka, ek.P, pq);
     auto pb = div(d2ekb, ek.P, pq);
     r.c0 = add(r.c0, pb, q);
-    r.c1 = add(r.c1, pb, q);
+    r.c1 = add(r.c1, pa, q);
 
     return r;
 }
diff --git a/ckksntt/ckkshyb.h b/ckksntt/ckkshyb.h
index 9269937..977f223 100644
--- a/ckksntt/ckkshyb.h
+++ b/ckksntt/ckkshyb.h
@@ -15,7 +15,7 @@ struct EkHyb
     int level;
     Integer P, ql;
     poly::Dpoly db, da;
-    EkHyb(int level, Sk sk, Param p, RndStream rs);
+    EkHyb(int level, Sk sk, Param p, RndStream & rs);
     string print() const;
 };
 
diff --git a/ckksntt/main.cpp b/ckksntt/main.cpp
index a9d3046..46e6aa2 100644
--- a/ckksntt/main.cpp
+++ b/ckksntt/main.cpp
@@ -24,11 +24,13 @@ try
 
     if (1)
     {
+        //t04_mul3_b1();
         t00_ntt();
         t01_encode();
         t02_encSk();
         t03_encPk();
         t04_mul3();
+        t05_mul2_b1();
         t05_mul2();
         t06_mul1();
         t07_mul();
diff --git a/ckksntt/main.h b/ckksntt/main.h
index 932dc75..f349492 100644
--- a/ckksntt/main.h
+++ b/ckksntt/main.h
@@ -6,7 +6,9 @@ void t01_encode();
 void t02_encSk();
 void t03_encPk();
 void t04_mul3();
+void t04_mul3_b1();
 void t05_mul2();
+void t05_mul2_b1();
 void t06_mul1();
 void t07_mul();
 
diff --git a/ckksntt/ntt.cpp b/ckksntt/ntt.cpp
index 532c3ea..f6a9e78 100644
--- a/ckksntt/ntt.cpp
+++ b/ckksntt/ntt.cpp
@@ -5,6 +5,8 @@
 #include "poly.h"
 #include "mathut.h"
 
+bool ntt::disabled = !true;
+
 namespace g
 {
 ntt::NttMan nttman;
diff --git a/ckksntt/ntt.h b/ckksntt/ntt.h
index 3d04a3c..a02254c 100644
--- a/ckksntt/ntt.h
+++ b/ckksntt/ntt.h
@@ -8,6 +8,8 @@
 
 namespace ntt
 {
+extern bool disabled;
+
 
 Integer findCloseQ(int n, Integer x);
 
diff --git a/ckksntt/poly.cpp b/ckksntt/poly.cpp
index 3a7db33..2cd1045 100644
--- a/ckksntt/poly.cpp
+++ b/ckksntt/poly.cpp
@@ -107,6 +107,8 @@ poly::Poly poly::mulmod_elwise(const Poly & a, const Poly & b, Integer q)
 
 poly::Poly poly::mulmod_btrfly(const Poly & a, const Poly & b, Integer q)
 {
+    if (ntt::disabled) return mulmod_simple(a, b, q);
+
     using namespace ntt;
     auto an = nttBfly(a, q);
     auto bn = nttBfly(b, q);
@@ -132,9 +134,20 @@ poly::Poly poly::add(Poly a, Poly b, Integer q)
 
 poly::Poly poly::rescaleRound(const Poly & a, Integer idelta)
 {
+    ///auto d2 = idelta / 2;
+    ///Poly r(a);
+    ///for (auto & x : r.v) x = (x + d2) / idelta;
+    ///return r;
+
     auto d2 = idelta / 2;
     Poly r(a);
-    for (auto & x : r.v) x = (x + d2) / idelta;
+    for (auto & x : r.v)
+    {
+        if (x < 0)
+            x = -((-x + d2) / idelta);
+        else
+            x = (x + d2) / idelta;
+    }
     return r;
 }
 
diff --git a/ckksntt/tmain.cpp b/ckksntt/tmain.cpp
index 1cc88ff..9f96ac0 100644
--- a/ckksntt/tmain.cpp
+++ b/ckksntt/tmain.cpp
@@ -165,7 +165,6 @@ void t04_mul3()
     using namespace ckks;
     using namespace std::complex_literals;
     Integer delta(64);
-    ///ParamEncode paramEnc(4, delta);
     Param param(4, Integer(1024), Integer(delta), 1);
     cout << "xi =" << roundv(1e-3, param.penc.vxi) << '\n';
 
@@ -509,3 +508,256 @@ void t10_hyb2()
     cout << "a22 =" << roundv(1e-2, a22) << '\n';
 }
 
+
+void t04_mul3_b1()
+{
+    cout << "\n>>> " << __func__ << '\n';
+
+    using namespace ckks;
+    using namespace std::complex_literals;
+    Integer delta(64);
+    Param param(2, Integer(1024), Integer(delta), 1);
+    cout << "xi =" << roundv(1e-3, param.penc.vxi) << '\n';
+
+    vector<cx> a = { 3.0 };
+
+    cout << "a =" << a << '\n';
+
+    Poly ma = encode(param, a);
+
+    cout << "ma = " << ma << '\n';
+    cout << "ma decoded =" << roundv(1e-2, decode(param, ma)) << '\n';
+
+    RndStream rs;
+    Sk sk(rs, param.penc.n);
+
+    Ctxt ca = encrypt(sk, ma, param, rs);
+    cout << "ca.c0 = " << ca.c0 << '\n';
+    cout << "ca.c1 = " << ca.c1 << '\n';
+
+    {
+        Poly md = decrypt(sk, ca, param);
+        cout << "md = " << md << '\n';
+        auto a2 = decode(param, md);
+        cout << "a2 =" << roundv(1e-2, a2) << '\n';
+    }
+
+    {
+        Poly ma2 = add(ma, ma, param.q0());
+        cout << "xa2add =" << roundv(1e-2, decode(param, ma2)) << '\n';
+    }
+
+    {
+        Poly ma2 = mul_simple(ma, ma);
+        Poly ma2sc = rescaleRound(ma2, param.penc.idelta);
+        cout << "xa2mul =" << roundv(1e-2, decode(param, ma2sc)) << '\n';
+    }
+
+    {
+        Ctxt ca2 = add(ca, ca, param);
+        Poly md2 = decrypt(sk, ca2, param);
+        cout << "md2 = " << md2 << '\n';
+        auto a22 = decode(param, md2);
+        cout << "a22 =" << roundv(1e-2, a22) << '\n';
+    }
+
+    cout << '\n';
+    Ctxt3 ca3 = mul3(ca, ca, param);
+    {
+        Poly md3 = decrypt(sk, ca3, param);
+        cout << "md3 = " << md3 << '\n';
+        auto a23 = decode(param, md3);
+        cout << "a23 =" << roundv(1e-2, a23) << '\n';
+
+        Poly md3sc = rescaleRound(md3, param.penc.idelta);
+        auto a23sc = decode(param, md3sc);
+        cout << "a23sc =" << roundv(1e-2, a23sc) << '\n';
+    }
+
+    cout << '\n';
+    {
+        Ctxt3 ca3sc = rescale(ca3, param.penc.idelta);
+        Poly md3s = decrypt(sk, ca3sc, param);
+        cout << "md3s = " << md3s << '\n';
+        auto a23s = decode(param, md3s);
+        cout << "a23s =" << roundv(1e-2, a23s) << '\n';
+    }
+}
+
+void t05_mul2_b1_v1()
+{
+    cout << "\n>>> " << __func__ << '\n';
+
+    struct Nttoff
+    {
+        bool oldval;
+        Nttoff() : oldval(ntt::disabled) { ntt::disabled = true; }
+        ~Nttoff() { ntt::disabled = oldval; }
+    } nttoff;
+
+
+    using namespace ckks;
+    using namespace std::complex_literals;
+
+    Integer delta(64);
+    Param param2(2, Integer(1024), Integer(delta), 1);
+    Param param1(1, Integer(1024), Integer(delta), 1);
+    //Param param = param2;
+
+    vector<cx> a = { 3.0 };
+
+    cout << "a =" << a << '\n';
+
+    Poly ma0 = encode(param2, a);
+    Poly ma; ma += ma0.v[0];
+
+    if (0)
+    {
+        ma.v[0] = ma.v[1] = ma.v[2] = ma.v[3] = Integer(0);
+        ma.v[0] = Integer(100);
+        cout << "ma xx = " << ma << '\n';
+        auto a2 = decode(param2, ma);
+        cout << "a2 xx = " << roundv(1e-16, a2) << '\n';
+        return;
+    }
+
+    cout << "ma = " << ma << '\n';
+
+    RndStream rs;
+    Sk sk(rs, param1.penc.n);
+
+    Ctxt ca = encrypt(sk, ma, param1, rs);
+    cout << "ca.c0 = " << ca.c0 << '\n';
+    cout << "ca.c1 = " << ca.c1 << '\n';
+
+    {
+        Poly md = decrypt(sk, ca, param1);
+        cout << "md = " << md << '\n';
+        Poly md0 = md; md0 += Integer(0);
+        auto a2 = decode(param2, md0);
+        cout << "a2 =" << roundv(1e-2, a2) << '\n';
+    }
+
+    Ctxt3 ca3 = mul3(ca, ca, param1);
+
+    {
+        Poly md3 = decrypt(sk, ca3, param1);
+        cout << "md3 = " << md3 << '\n';
+        Poly md30 = md3; md30 += Integer(0);
+        auto a23 = decode(param2, md30);
+        cout << "a23 =" << roundv(1e-2, a23) << '\n';
+
+        Poly md3sc = rescaleRound(md3, param1.penc.idelta);
+        Poly md3sc0 = md3sc; md3sc0 += Integer(0);
+        auto a23sc = decode(param2, md3sc0);
+        cout << "a23sc =" << roundv(1e-2, a23sc) << '\n';
+    }
+
+    cout << "ca3.c0 = " << ca3.c0 << '\n';
+    cout << "ca3.c1 = " << ca3.c1 << '\n';
+    cout << "ca3.c2 = " << ca3.c2 << '\n';
+    EkExt ek(sk, param1, rs);
+    Ctxt ca2 = relinExt(ca3, param1, ek);
+    cout << "ca2.c0 = " << ca2.c0 << '\n';
+    cout << "ca2.c1 = " << ca2.c1 << '\n';
+    Ctxt ca2sc = rescale(ca2, param1.penc.idelta);
+    cout << "ca2sc.c0 = " << ca2sc.c0 << '\n';
+    cout << "ca2sc.c1 = " << ca2sc.c1 << '\n';
+
+    Poly md2 = decrypt(sk, ca2sc, param1);
+    cout << "md2 = " << md2 << '\n';
+    Poly md20 = md2; md20 += Integer(0);
+    auto a22 = decode(param2, md20);
+    cout << "a22 =" << roundv(1e-2, a22) << '\n';
+}
+
+
+void t05_mul2_b1()
+{
+    t05_mul2_b1_v1();
+
+    cout << "\n>>> " << __func__ << '\n';
+
+    struct Nttoff
+    {
+        bool oldval;
+        Nttoff() : oldval(ntt::disabled) { ntt::disabled = true; }
+        ~Nttoff() { ntt::disabled = oldval; }
+    } nttoff;
+
+
+    using namespace ckks;
+    using namespace std::complex_literals;
+
+    Integer delta(64);
+    Param param2(2, Integer(1024), Integer(delta), 1);
+    //Param param1(1, Integer(1024), Integer(delta), 1);
+    Param param = param2;
+
+    vector<cx> a = { 3.0 };
+
+    cout << "a =" << a << '\n';
+
+    Poly ma = encode(param2, a);
+    //Poly ma; ma += ma0.v[0];
+
+    if (0)
+    {
+        ma.v[0] = ma.v[1] = ma.v[2] = ma.v[3] = Integer(0);
+        ma.v[0] = Integer(100);
+        cout << "ma xx = " << ma << '\n';
+        auto a2 = decode(param2, ma);
+        cout << "a2 xx = " << roundv(1e-16, a2) << '\n';
+        return;
+    }
+
+    cout << "ma = " << ma << '\n';
+
+    RndStream rs;
+    Sk sk(rs, param.penc.n);
+
+    Ctxt ca = encrypt(sk, ma, param, rs);
+    cout << "ca.c0 = " << ca.c0 << '\n';
+    cout << "ca.c1 = " << ca.c1 << '\n';
+
+    {
+        Poly md = decrypt(sk, ca, param);
+        cout << "md = " << md << '\n';
+        Poly md0 = md; //md0 += Integer(0);
+        auto a2 = decode(param, md0);
+        cout << "a2 =" << roundv(1e-2, a2) << '\n';
+    }
+
+    Ctxt3 ca3 = mul3(ca, ca, param);
+
+    {
+        Poly md3 = decrypt(sk, ca3, param);
+        cout << "md3 = " << md3 << '\n';
+        Poly md30 = md3; //md30 += Integer(0);
+        auto a23 = decode(param, md30);
+        cout << "a23 =" << roundv(1e-2, a23) << '\n';
+
+        Poly md3sc = rescaleRound(md3, param.penc.idelta);
+        Poly md3sc0 = md3sc; //md3sc0 += Integer(0);
+        auto a23sc = decode(param, md3sc0);
+        cout << "a23sc =" << roundv(1e-2, a23sc) << '\n';
+    }
+
+    cout << "ca3.c0 = " << ca3.c0 << '\n';
+    cout << "ca3.c1 = " << ca3.c1 << '\n';
+    cout << "ca3.c2 = " << ca3.c2 << '\n';
+    EkExt ek(sk, param, rs);
+    Ctxt ca2 = relinExt(ca3, param, ek);
+    cout << "ca2.c0 = " << ca2.c0 << '\n';
+    cout << "ca2.c1 = " << ca2.c1 << '\n';
+    Ctxt ca2sc = rescale(ca2, param.penc.idelta);
+    cout << "ca2sc.c0 = " << ca2sc.c0 << '\n';
+    cout << "ca2sc.c1 = " << ca2sc.c1 << '\n';
+
+    Poly md2 = decrypt(sk, ca2sc, param);
+    cout << "md2 = " << md2 << '\n';
+    Poly md20 = md2; //md20 += Integer(0);
+    auto a22 = decode(param, md20);
+    cout << "a22 =" << roundv(1e-2, a22) << '\n';
+}
+
