#pragma once

#include <string>

#include "integer.h"
#include "err.h"

using std::string;

namespace rns_ns
{

class RnsForm;

class Rns
{
    protected:
        std::vector<Integer> qs, Ms_, us;
        Integer maxPow2digit = -1;
        int size() const { return (int)qs.size(); }
        vint split(Integer x) const;
        Integer lowval(const vint & v) const;
        bool islowval(const vint & v) const;

        std::pair<Integer, int> blend_(const vint & v) const;
        ///int rank_() const;

        void init(std::initializer_list<Integer> li);
        Rns(std::initializer_list<Integer> li) { init(li); }
        Rns() {}
        virtual string print() const;
        virtual vint pow2div(const vint & v, int pow2) const = 0;

    private:
        void assertRnsInited() const { if (qs.empty()) nevers("rns is not set"); }
        friend class RnsForm;
    public:
        Integer dynrange_() const { Integer r = 1; for (auto x : qs) r *= x; return r; }
};

class RnsForm
{
        const Rns * prns = nullptr;
        vint v;

        RnsForm(const Rns * r) : prns(r) {}
    public:
        RnsForm() {}

        RnsForm(const Rns & r, Integer x) : prns(&r), v(r.split(x)) {}
        RnsForm(const Rns & r, const vint & u) : prns(&r), v(u) {}

        RnsForm(const Rns * r, Integer x) : prns(r), v(r->split(x)) {}
        RnsForm(const Rns * r, const vint & u) : prns(r), v(u) {}

        vint values() const { return v;  }
        Integer lowval() const { if (!prns) never; return prns->lowval(v); }
        bool islowval() const { if (!prns) never; return prns->islowval(v); }
        RnsForm pow2div(int pow2) const
        {
            if (!prns) never;
            RnsForm r(prns);
            r.v = prns->pow2div(v, pow2);
            return r;
        }
        Integer blend_() const { return prns->blend_(v).first; }
        int rank_() const { return prns->blend_(v).second; }


        int operator+=(const vint & b); // returns number of oveflows
        RnsForm & operator+=(const rns_ns::RnsForm & b);
        RnsForm operator+(const rns_ns::RnsForm & b) const { RnsForm t = *this;  return t += b; }
        RnsForm & operator*=(const rns_ns::RnsForm & b);
        RnsForm operator*(const rns_ns::RnsForm & b) const { RnsForm t = *this;  return t *= b; }

        RnsForm operator-() const;
        RnsForm & operator-=(const rns_ns::RnsForm & b) { return *this += -b; }
        RnsForm operator-(const rns_ns::RnsForm & b) const { RnsForm t = *this;  return t -= b; }

        RnsForm & operator--() { return *this -= RnsForm(*prns, 1); }
        RnsForm operator--(int) { auto t = *this; --*this; return t; }
        RnsForm & operator++() { return *this += RnsForm(*prns, 1); }
        RnsForm operator++(int) { auto t = *this; ++*this; return t; }
};

class RnsMrs : public Rns
// ref: (in russian) K. S. Isupov, Vysokoproizvoditel'nye vychislenija ...
{
        using vvint = std::vector<vint>;
        vvint cjk;

        void myinit();
    public:
        RnsMrs() : Rns() {}
        RnsMrs(std::initializer_list<Integer> li) : Rns(li) { myinit(); }
        void init(std::initializer_list<Integer> li) { Rns::init(li); myinit(); }
        virtual string print() const override { return Rns::print(); }
        virtual vint pow2div(const vint & v, int pow2) const override;

    private:
        vint pow2div1(const vint & v) const;
        vint mrs(const vint & v) const;
        void div2exact(vint & v) const;
};

class RnsSel : public Rns
// ref: Selianinau, An Efficient CRT-Base Power-of-Two Scaling ...
{

};

class RnsYes : public Rns
// Oleg's algorithm
{
        Integer beta;
        ///RnsForm Y_x, Y2_x; // FIXME remove
        RnsForm Y_, Yn_;
        vint qib; // qs inverted in beta

        void myinit();
    public:
        RnsYes() : Rns(), beta(0) {}
        RnsYes(std::initializer_list<Integer> li) : Rns(li) { myinit(); }
        void init(std::initializer_list<Integer> li) { Rns::init(li); myinit(); }
        virtual string print() const override { return Rns::print() + myprint(); }
        virtual vint pow2div(const vint & v, int pow2) const override;
        std::pair<int, int> rank_v1(const vint & v) const;
        std::pair<int, int> rank_v2(const vint & v) const;

    private:
        vint pow2div1(const vint & v) const;
        void div2exact(vint & v) const;
        int parity_v1(const vint & v, int level) const;
        string myprint() const;
        int parity(const vint & v) const { return parity_v1(v, 2); }

        vint rank_2chi(const vint & x) const;
        vint rank_cube(const vint & chi) const;
        std::tuple<int, int> rank_diag(const vint & ksi) const;
        int rank_parity(const vint & chi, int rnk) const;
        vint rank_ypoint(const vint & chi) const;
};

} // rns_ns


///rns_ns::RnsForm operator+(const rns_ns::RnsForm& a, const rns_ns::RnsForm& b);
///rns_ns::RnsForm operator*(const rns_ns::RnsForm& a, const rns_ns::RnsForm& b);
///rns_ns::RnsForm operator-(const rns_ns::RnsForm& a, const rns_ns::RnsForm& b);
///rns_ns::RnsForm operator-(const rns_ns::RnsForm& a);

///inline rns_ns::RnsForm& operator+=(rns_ns::RnsForm& a, const rns_ns::RnsForm& b) { return a = a + b; }
///inline rns_ns::RnsForm& operator*=(rns_ns::RnsForm& a, const rns_ns::RnsForm& b) { return a = a * b; }
///inline rns_ns::RnsForm& operator-=(rns_ns::RnsForm& a, const rns_ns::RnsForm& b) { return a = a - b; }


